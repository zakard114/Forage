package com.wellsfargo.counselor.controller;

import com.wellsfargo.counselor.dto.AdvisorDTO;
import com.wellsfargo.counselor.dto.ClientDTO;
import com.wellsfargo.counselor.service.AdvisorService;
import jakarta.annotation.Nonnull;
import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/advisors")
public class AdvisorController {

    private final AdvisorService advisorService;

    @Autowired
    public AdvisorController(AdvisorService advisorService) {
        this.advisorService = advisorService;
    }

    @PostMapping
    public ResponseEntity<AdvisorDTO> createAdvisor(@Valid @RequestBody AdvisorDTO advisorDTO){
        AdvisorDTO createdAdvisor = advisorService.createAdvisor(advisorDTO);
        return ResponseEntity.status(HttpStatus.CREATED).body(createdAdvisor);
    }

    @GetMapping("/{advisorId}")
    public ResponseEntity<AdvisorDTO> getAdvisorById(@PathVariable String advisorId){
        AdvisorDTO advisorDTO = advisorService.getAdvisorById(advisorId);
        return ResponseEntity.status(HttpStatus.OK).body(advisorDTO);
    }

    @GetMapping
    public ResponseEntity<List<AdvisorDTO>> getAllAdvisors(){
        List<AdvisorDTO> advisorDTOList = advisorService.getAllAdvisors();
        return ResponseEntity.status(HttpStatus.OK).body(advisorDTOList);
    }

    @PutMapping("/{advisorId}")
    public ResponseEntity<AdvisorDTO> updateAdvisor(@PathVariable String advisorId, @Valid @RequestBody AdvisorDTO advisorDTO){
        AdvisorDTO updatedAdvisor = advisorService.updateAdvisor(advisorId, advisorDTO);
        return ResponseEntity.status(HttpStatus.OK).body(updatedAdvisor);
    }

    @DeleteMapping("/{advisorId}")
    public ResponseEntity<Void> deleteAdvisor(@PathVariable String advisorId){
        advisorService.deleteAdvisor(advisorId);
        return ResponseEntity.status(HttpStatus.NO_CONTENT).build();
    }

    @PutMapping("/{advisorId}/client")
    public ResponseEntity<AdvisorDTO> addClientToAdvisor(@Nonnull @PathVariable String advisorId
            , @Nonnull @Valid @RequestBody ClientDTO clientDTO){
        // @Nonnull is applied to non-owner/dependent objects (DTOs, ids) to ensure they are not null.
        // Owner/primary entity (e.g., ownerId) is excluded from @Nonnull as it is auto-generated by the system.
        AdvisorDTO addedClientToAdvisor = advisorService.addClientToAdvisor(advisorId, clientDTO);
        return ResponseEntity.status(HttpStatus.OK).body(addedClientToAdvisor);
        // or .status(HttpStatus.OK).body(addedClientToAdvisor);
        // or return ResponseEntity.noContent().build();
    }

    @DeleteMapping("/{advisorId}/client")
    public ResponseEntity<Void> removeClientFromAdvisor(@Nonnull @PathVariable String advisorId
            , @Nonnull @Valid @RequestBody ClientDTO clientDTO){
        advisorService.removeClientFromAdvisor(advisorId, clientDTO);
        return ResponseEntity.status(HttpStatus.NO_CONTENT).build();
    }
}
