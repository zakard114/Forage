
Step3





여기 당신의 과제가 있습니다
이제 직원 목록을 관리하는 기본 RESTful 웹 서비스를 구축했으므로 관리자가 JSON 데이터 업로드를 지원하도록 시스템을 확장해 달라고 요청했습니다.

시스템에 새로운 직원을 추가하려면 다음과 같이 구성된 POST 명령을 http://localhost:8080/employees 로 보낼 수 있어야 합니다 .

{

    “employee_id”: “문자열”,

    “first_name”: “문자열”,

    “last_name”: “string”,

    “이메일”: “문자열”,

    “제목”: “문자열”

}

이 기능을 추가하려면 EmployeeController.java 파일을 편집해야 합니다. 이 변경에 따라 애플리케이션은 HTTP GET 요청을 http://localhost:8080/employees 로 보내 직원 전체 목록을 쿼리하는 것을 계속 지원해야 합니다 . 

이 작업이 끝나면 직원을 쿼리하고 새 직원을 추가하는 요청을 지원하도록 웹 서비스를 확장하게 됩니다. JSON 데이터를 추가하기 위해 HTTP POST 요청 기능을 추가하는 방법에 대한 자세한 내용은 아래 리소스 섹션을 검토하세요.

작업을 완료하려면 아래 단계를 따르세요.

1단계 : 아래 리소스 섹션에서 Spring Boot로 파일을 다운로드하고 업로드하는 방법을 검토하여 시작합니다 . 그러면 HTTP POST 서비스 호출이 작동하는 방식에 대한 개요가 제공됩니다. 그런 다음 이 기능을 추가하는 방법을 설명하는 더 자세한 튜토리얼을 보려면 Spring Boot(Java)에서 RESTful HTTP 서버 만들기를 검토합니다.

2단계 : 개인 변수 first_name, last_name, employee_id, email, title에 대한 getter 및 setter 함수를 만듭니다.

3단계 : http://localhost:8080/employees 에 대한 HTTP POST 요청을 지원하는 리소스 컨트롤러를 만듭니다 . 이 주소로 요청을 보내면 시스템에 직원이 추가되어야 합니다.

4단계 : 애플리케이션의 실행 가능한 버전을 빌드한 다음 실행 파일을 실행합니다.

5단계 : 예제 직원 데이터와 함께 http://localhost:8080/employees 로 HTTP POST 요청을 보내서 데이터가 예상대로 직원 목록에 추가되는지 테스트합니다.

6단계 : 애플리케이션이 예상대로 작동하면 애플리케이션 파일이 포함된 zip 파일을 제출합니다. 여기에는 Employee.java, Employees.java, EmployeeController.java, EmployeeManager.java, RestServiceApplication.java가 포함되어야 합니다. 이것이 이 작업에 대한 납품물이 됩니다.

다음 단계에서 예를 볼 수 있지만, 먼저 시도해 보는 것이 좋습니다!

https://www.theforage.com/virtual-experience/da2T3WZCbMAJD7bNB/hewlett-packard-enterprise/software-engineering-pcij/implement-the-ability-to-upload-data



리소스들

How to create a REST API using Java Spring Boot
https://www.geeksforgeeks.org/how-to-create-a-rest-api-using-java-spring-boot/

How to download and upload files with Spring Boot REST API
https://devwithus.com/download-upload-files-with-spring-boot/

Creating a RESTful HTTP Server in Spring Boot (Java) - With Full Examples
https://www.sohamkamani.com/java/spring-rest-http-server/





==


Here is your task
Now that you have built a basic RESTful web service that manages a list of employees, your manager has asked you to expand your system so that it supports the upload of JSON data.

To add a new Employee to your system, you should be able to send a POST command to http://localhost:8080/employees, structured as follows:

{

    “employee_id”: “string”,

    “first_name”: “string”,

    “last_name”: “string”,

    “email”: “string”,

    “title”: “string”

}

You will need to edit your EmployeeController.java file to add this function. Following this change, your application should continue to support querying the full list of Employees by sending an HTTP GET request to http://localhost:8080/employees. 

At the end of this task, you’ll have expanded your web service to support requests to query Employees and add new Employees. For more information about how to add HTTP POST request functionality in order to add JSON data, review the Resources section below.

To complete the task, follow the steps below:

Step 1: Begin by reviewing how to download and upload files with Spring Boot in the Resources section below. This will give you an overview of how HTTP POST service calls work. Then, review Creating a RESTful HTTP Server in Spring Boot (Java) for a more detailed tutorial describing how to add this functionality.

Step 2: Create getter and setter functions for the private variables first_name, last_name, employee_id, email, and title.

Step 3: Create a resource controller that supports an HTTP POST request to http://localhost:8080/employees. Sending a request to this address should add an Employee to the system.

Step 4: Build an executable version of your application, and then launch the executable file.

Step 5: Send an HTTP POST request to http://localhost:8080/employees with example employee data to test that the data is added to the employee list as expected.

Step 6: Once your application is working as expected, submit a zip file containing your application files. This should include Employee.java, Employees.java, EmployeeController.java, EmployeeManager.java, and RestServiceApplication.java. This will be your deliverable for this task.

You'll see an example on the next step, but we encourage you to give it a go first!